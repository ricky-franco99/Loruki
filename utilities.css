/* Utilities */
/* Classes that we'll use all around the website */
.container{
    /* This will prevent the navbar from expanding all the way */
    max-width: 1100px;
    margin: 0 auto;
    /* overflow property removes any margin from any elements that are causing
    the container to have any unwanted padding */
    overflow: auto;
    padding: 0 40px;
}

.card{
    background-color: white;
    color: #333;
    border-radius: 10px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.3);
    padding: 20px;
    margin: 10px;
}
.btn{
    /* inline-block is placed so we could easily 
    customize our button without it being treated like an actual single element */
    display: inline-block;
    padding: 10px 30px;
    cursor: pointer;
    /* Example of the benefits of using :root at the beginning of out css */
    background-color: var(--primary-color);
    color: #fff;
    border: none;
    border-radius: 5px;
}
.btn-outline{
    background-color: transparent;
    border: 1px #fff solid;
}
.btn:hover{
    /* Scaling the button down */
    transform: scale(.98);
}

/* Backgrounds and Colored buttons */
.bg-primary, .btn-primary{
    background-color: var(--primary-color);
    color: #fff;
}
.bg-secondary, .btn-secondary{
    background-color: var(--secondary-color);
    color: #fff;
}

.bg-dark, .btn-dark{
    background-color: var(--dark-color);
    color: #fff;
}

/* Since it's a light bg-color use dark text */
.bg-light, .btn-light{
    background-color: var(--light-color);
    color: #333;
}
/* TEXT SIZES */
.lead{
    font-size: 20px;
}

.sm{
    font-size: 1rem;
}

.md{
    font-size: 2rem;
}
.lg{
    font-size: 3rem;
}
.xl{
    font-size: 4rem;
}



.text-center{
    text-align: center;
}

/* Alert */
.alert{
    background-color: var(--light-color);
    padding: 10px 20px;
    font-weight: bold;
    border-radius: 5px;
    margin: 12px 0;
}

.alert i{
    margin-right: 10px;
}

.alert-success{
    background-color: var(--success-color);
    color: #fff;
}

.alert-error{
    background-color: var(--error-color);
    color: #fff;
}
.flex{
    display: flex;
    justify-content: center;
    align-items: center;
    /* This means 100% of whatever the container is */
    height: 100%;
}

/* Rememeber you can use classes such as ".grid" on multiple elements 
think of them as preset classes. When you use them implement specificity so you dont
mess with other elements or properties unintentionally*/
.grid{
    display: grid;
    /* This is how you properly intergrate grid */
    /* {2fr} is the text and {1fr} is the small form */
    grid-template-columns: 3(1fr);
    gap: 20px;
    justify-content: center;
    align-items: center;
    /* It's important to set the height in this class or else align-items 
    wont have a height to determine where to place content. Since 
    align-items aligns content vertically*/
    height: 100%;
}

/* We did this to make  */
.grid-3{
    grid-template-columns: repeat(3,1fr);
}

/* Margin- top and bottom */
.my-1{
    /* Remember the default for rem is 16px. SO 1 rem is 16px */
    margin: 1rem 0;
}

.my-2{
    margin: 1.5rem 0;
}

.my-3{
    margin: 2rem 0;
}
.my-4{
    margin: 3rem 0;
}

.my-5{
    margin: 5rem 0;
}


/* All around margin */
.m-1{
    
    margin: 1rem 0;
}

.m-2{
    margin: 1.5rem 0;
}

.m-3{
    margin: 2rem 0;
}
.m-4{
    margin: 3rem 0;
}

.m-5{
    margin: 5rem 0;
}

/* padding */

.py-1{
    /* Remember the default for rem is 16px. SO 1 rem is 16px */
    padding: 1rem 0;
}

.py-2{
    padding: 1.5rem 0;
}

.py-3{
    padding: 2rem 0;
}
.py-4{
    padding: 3rem 0;
}

.py-5{
    padding: 5rem 0;
}

/* Padding all around */
.p-1{
    /* Remember the default for rem is 16px. SO 1 rem is 16px */
    padding: 1rem;
}

.p-2{
    padding: 1.5rem;
}

.p-3{
    padding: 2rem;
}
.p-4{
    padding: 3rem;
}

.p-5{
    padding: 5rem;
}
